#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ TESTES LOCAIS - PROGRAMA EQUIL√çBRIO
Verifica se todas as funcionalidades est√£o funcionando corretamente
"""

import requests
import json
from datetime import datetime
import time

BASE_URL = "http://localhost:5000"

def test_home_page():
    """Testa a p√°gina inicial"""
    print("üè† TESTANDO P√ÅGINA INICIAL")
    print("-" * 40)
    
    try:
        response = requests.get(BASE_URL, timeout=10)
        
        if response.status_code == 200:
            content = response.text
            
            # Verifica√ß√µes b√°sicas
            checks = {
                "HTML v√°lido": "<html" in content.lower(),
                "T√≠tulo presente": "programa equil√≠brio" in content.lower(),
                "CSS carregado": "css" in content.lower(),
                "JavaScript presente": "script" in content.lower(),
                "Formul√°rio CNPJ": "cnpj" in content.lower()
            }
            
            print(f"‚úÖ Status: {response.status_code}")
            for check, result in checks.items():
                status = "‚úÖ" if result else "‚ùå"
                print(f"{status} {check}")
            
            return all(checks.values())
        else:
            print(f"‚ùå Erro: Status {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        return False

def test_cnpj_validation():
    """Testa a valida√ß√£o de CNPJ"""
    print("\nüìã TESTANDO VALIDA√á√ÉO DE CNPJ")
    print("-" * 40)
    
    try:
        url = f"{BASE_URL}/validar_cnpj"
        
        # Teste com CNPJ v√°lido
        test_cnpj = "11.222.333/0001-81"
        data = {"cnpj": test_cnpj}
        
        response = requests.post(url, json=data, timeout=15)
        
        print(f"üîç Testando CNPJ: {test_cnpj}")
        print(f"üìä Status: {response.status_code}")
        
        if response.status_code == 200:
            try:
                result = response.json()
                print(f"‚úÖ Resposta JSON v√°lida")
                print(f"üìù Resultado: {result}")
                return True
            except:
                print("‚ùå Resposta n√£o √© JSON v√°lido")
                return False
        else:
            print(f"‚ùå Erro: {response.status_code}")
            print(f"üìÑ Conte√∫do: {response.text[:200]}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def test_questionario_page():
    """Testa a p√°gina do question√°rio"""
    print("\n‚ùì TESTANDO P√ÅGINA DO QUESTION√ÅRIO")
    print("-" * 40)
    
    try:
        response = requests.get(f"{BASE_URL}/questionario", timeout=10)
        
        if response.status_code == 200:
            content = response.text
            
            checks = {
                "P√°gina carregou": True,
                "Perguntas presentes": "pergunta" in content.lower(),
                "Formul√°rio presente": "form" in content.lower(),
                "JavaScript presente": "script" in content.lower()
            }
            
            print(f"‚úÖ Status: {response.status_code}")
            for check, result in checks.items():
                status = "‚úÖ" if result else "‚ùå"
                print(f"{status} {check}")
            
            return all(checks.values())
        else:
            print(f"‚ùå Erro: Status {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def test_admin_login():
    """Testa o acesso administrativo"""
    print("\nüë§ TESTANDO LOGIN ADMINISTRATIVO")
    print("-" * 40)
    
    try:
        response = requests.get(f"{BASE_URL}/admin/login", timeout=10)
        
        if response.status_code == 200:
            content = response.text
            
            checks = {
                "P√°gina de login carregou": True,
                "Formul√°rio de login": "login" in content.lower(),
                "Campos username/password": "username" in content.lower() and "password" in content.lower()
            }
            
            print(f"‚úÖ Status: {response.status_code}")
            for check, result in checks.items():
                status = "‚úÖ" if result else "‚ùå"
                print(f"{status} {check}")
            
            return all(checks.values())
        else:
            print(f"‚ùå Erro: Status {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def test_static_files():
    """Testa se arquivos est√°ticos est√£o sendo servidos"""
    print("\nüé® TESTANDO ARQUIVOS EST√ÅTICOS")
    print("-" * 40)
    
    static_files = [
        "/static/css/style.css",
        "/static/js/main.js",
        "/static/images/logo-conecta.png"
    ]
    
    results = {}
    
    for file_path in static_files:
        try:
            response = requests.get(f"{BASE_URL}{file_path}", timeout=5)
            results[file_path] = response.status_code == 200
            status = "‚úÖ" if response.status_code == 200 else "‚ùå"
            print(f"{status} {file_path}: {response.status_code}")
        except:
            results[file_path] = False
            print(f"‚ùå {file_path}: Erro de conex√£o")
    
    return any(results.values())  # Pelo menos um arquivo deve funcionar

def generate_test_report(results):
    """Gera relat√≥rio dos testes"""
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO FINAL DOS TESTES LOCAIS")
    print("=" * 60)
    
    print(f"üïí Teste realizado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"üåê URL testada: {BASE_URL}")
    print()
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    print("üìã RESULTADOS:")
    for test_name, result in results.items():
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"   {test_name}: {status}")
    
    print()
    print("üìä RESUMO:")
    print(f"   Total de testes: {total_tests}")
    print(f"   Testes aprovados: {passed_tests}")
    print(f"   Testes reprovados: {total_tests - passed_tests}")
    print(f"   Taxa de sucesso: {(passed_tests/total_tests)*100:.1f}%")
    
    if passed_tests == total_tests:
        print()
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema pronto para deploy na Vercel")
        return True
    else:
        print()
        print("‚ö†Ô∏è ALGUNS TESTES FALHARAM")
        print("üîß Corrigir problemas antes do deploy")
        return False

def main():
    """Executa todos os testes"""
    print("üöÄ INICIANDO TESTES LOCAIS DO PROGRAMA EQUIL√çBRIO")
    print(f"üéØ Testando: {BASE_URL}")
    print()
    
    # Aguardar um pouco para garantir que o servidor est√° rodando
    print("‚è≥ Aguardando servidor estar pronto...")
    time.sleep(2)
    
    # Executar testes
    results = {
        "P√°gina Inicial": test_home_page(),
        "Valida√ß√£o CNPJ": test_cnpj_validation(),
        "P√°gina Question√°rio": test_questionario_page(),
        "Login Administrativo": test_admin_login(),
        "Arquivos Est√°ticos": test_static_files()
    }
    
    # Gerar relat√≥rio
    success = generate_test_report(results)
    
    return success

if __name__ == "__main__":
    main()
