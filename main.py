from flask import Flask, render_template, request, jsonify, send_file, url_for, redirect, session, flash
import json
import os
import re
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.colors import HexColor
from reportlab.lib.utils import ImageReader
from reportlab.lib.units import inch
import io
import base64
import requests
from supabase import create_client, Client
from decouple import config
from validate_docbr import CNPJ
import hashlib
import secrets
from functools import wraps

app = Flask(__name__)

# Configura√ß√µes
app.secret_key = config('FLASK_SECRET_KEY', default='dev-key-change-in-production')
app.static_folder = 'static'
app.template_folder = 'templates'

# Configura√ß√£o do Supabase
SUPABASE_URL = config('SUPABASE_URL', default='')
SUPABASE_KEY = config('SUPABASE_KEY', default='')

if SUPABASE_URL and SUPABASE_KEY:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
else:
    supabase = None
    print("‚ö†Ô∏è  Configura√ß√µes do Supabase n√£o encontradas. Funcionalidades de banco de dados estar√£o limitadas.")

# Validador de CNPJ
cnpj_validator = CNPJ()

# API ReceitaWS
RECEITAWS_API_URL = config('RECEITAWS_API_URL', default='https://www.receitaws.com.br/v1/cnpj/')

def requires_admin(f):
    """Decorator para rotas que requerem autentica√ß√£o de admin"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'admin_user' not in session:
            return redirect(url_for('admin_login'))
        return f(*args, **kwargs)
    return decorated_function

def validar_cnpj(cnpj):
    """Valida CNPJ usando a biblioteca validate-docbr"""
    if not cnpj:
        return False
    
    # Remove formata√ß√£o
    cnpj_limpo = re.sub(r'[^\d]', '', cnpj)
    
    return cnpj_validator.validate(cnpj_limpo)

def consultar_cnpj_receita_ws(cnpj):
    """Consulta dados da empresa na ReceitaWS"""
    try:
        # Remove formata√ß√£o do CNPJ
        cnpj_limpo = re.sub(r'[^\d]', '', cnpj)
        
        # Faz a requisi√ß√£o para a API
        response = requests.get(f"{RECEITAWS_API_URL}{cnpj_limpo}", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            # Verifica se houve erro na consulta
            if data.get('status') == 'ERROR':
                return None
            
            return {
                'razao_social': data.get('nome', ''),
                'nome_fantasia': data.get('fantasia', ''),
                'cnpj': cnpj_limpo,
                'situacao': data.get('situacao', ''),
                'atividade_principal': data.get('atividade_principal', [{}])[0].get('text', '') if data.get('atividade_principal') else '',
                'endereco': {
                    'logradouro': data.get('logradouro', ''),
                    'numero': data.get('numero', ''),
                    'complemento': data.get('complemento', ''),
                    'bairro': data.get('bairro', ''),
                    'municipio': data.get('municipio', ''),
                    'uf': data.get('uf', ''),
                    'cep': data.get('cep', '')
                },
                'telefone': data.get('telefone', ''),
                'email': data.get('email', ''),
                'data_abertura': data.get('abertura', '')
            }
        else:
            return None
            
    except requests.exceptions.RequestException:
        return None
    except Exception:
        return None

def salvar_empresa_diagnostico(dados_empresa, respostas, analise):
    """Salva empresa e diagn√≥stico no Supabase"""
    if not supabase:
        return None, None
    
    try:
        # Verificar se empresa j√° existe
        empresa_existente = supabase.table('empresas').select('*').eq('cnpj', dados_empresa['cnpj']).execute()
        
        if empresa_existente.data:
            # Empresa j√° existe, usar ID existente
            empresa_id = empresa_existente.data[0]['id']
            
            # Atualizar dados da empresa se necess√°rio
            supabase.table('empresas').update({
                'rh_responsavel': dados_empresa['rh_responsavel'],
                'cargo_rh': dados_empresa['cargo'],
                'email': dados_empresa['email'],
                'whatsapp': dados_empresa.get('whatsapp', ''),
                'num_colaboradores': dados_empresa['num_colaboradores']
            }).eq('id', empresa_id).execute()
            
        else:
            # Criar nova empresa
            nova_empresa = supabase.table('empresas').insert({
                'razao_social': dados_empresa['razao_social'],
                'nome_fantasia': dados_empresa.get('nome_fantasia', ''),
                'cnpj': dados_empresa['cnpj'],
                'email': dados_empresa['email'],
                'telefone': dados_empresa.get('telefone', ''),
                'whatsapp': dados_empresa.get('whatsapp', ''),
                'endereco': dados_empresa.get('endereco', {}),
                'num_colaboradores': dados_empresa['num_colaboradores'],
                'setor_atividade': dados_empresa.get('atividade_principal', ''),
                'rh_responsavel': dados_empresa['rh_responsavel'],
                'cargo_rh': dados_empresa['cargo']
            }).execute()
            
            empresa_id = nova_empresa.data[0]['id']
        
        # Salvar diagn√≥stico
        novo_diagnostico = supabase.table('diagnosticos').insert({
            'empresa_id': empresa_id,
            'respostas': respostas,
            'analise': analise,
            'nivel_risco': analise['nivel_risco'],
            'questoes_criticas': analise['questoes_criticas'],
            'areas_foco': analise['areas_foco'],
            'acoes_recomendadas': analise['acoes_recomendadas'],
            'status': 'concluido'
        }).execute()
        
        return empresa_id, novo_diagnostico.data[0]['id']
        
    except Exception as e:
        print(f"Erro ao salvar no banco: {e}")
        return None, None

# Dados das perguntas do question√°rio
PERGUNTAS = [
    {
        "id": 1,
        "titulo": "üß† 1. Quais s√£o os principais fatores de estresse percebidos entre os colaboradores atualmente?",
        "objetivo": "Identificar fontes de estresse no ambiente de trabalho",
        "opcoes": [
            {"valor": "alta_carga", "texto": "‚ö° Alta carga de trabalho"},
            {"valor": "metas_excessivas", "texto": "üéØ Metas excessivas"},
            {"valor": "clima_organizacional", "texto": "üå°Ô∏è Clima organizacional"},
            {"valor": "falta_reconhecimento", "texto": "üèÜ Falta de reconhecimento"}
        ]
    },
    {
        "id": 2,
        "titulo": "üìä 2. A empresa j√° registrou casos recentes de afastamento por transtornos mentais (ansiedade, depress√£o, burnout)?",
        "objetivo": "Avaliar a incid√™ncia de problemas de sa√∫de mental",
        "opcoes": [
            {"valor": "frequencia_alta", "texto": "üö® Sim, com frequ√™ncia alta"},
            {"valor": "frequencia_moderada", "texto": "‚ö†Ô∏è Sim, com frequ√™ncia moderada"},
            {"valor": "poucos_casos", "texto": "üìâ Sim, poucos casos"},
            {"valor": "nao", "texto": "‚úÖ N√£o"}
        ]
    },
    {
        "id": 3,
        "titulo": "üò¥ 3. O RH identifica sinais de esgotamento ou desmotiva√ß√£o em algum grupo de colaboradores?",
        "objetivo": "Detectar sinais precoces de burnout e desmotiva√ß√£o",
        "opcoes": [
            {"valor": "critico", "texto": "üö® Sim, em n√≠vel cr√≠tico"},
            {"valor": "moderado", "texto": "‚ö†Ô∏è Sim, em n√≠vel moderado"},
            {"valor": "leve", "texto": "üìä Sim, sinais leves"},
            {"valor": "nao", "texto": "‚úÖ N√£o"}
        ]
    },
    {
        "id": 4,
        "titulo": "üé≠ 4. Quais a√ß√µes de sa√∫de mental j√° foram realizadas nos √∫ltimos 12 meses?",
        "objetivo": "Mapear a√ß√µes j√° implementadas",
        "opcoes": [
            {"valor": "nenhuma", "texto": "‚ùå Nenhuma"},
            {"valor": "palestras", "texto": "üé§ Palestras"},
            {"valor": "atendimento", "texto": "üß† Atendimento psicol√≥gico"},
            {"valor": "multiplas", "texto": "üîÑ M√∫ltiplas a√ß√µes (palestras, din√¢micas, parcerias)"}
        ]
    },
    {
        "id": 5,
        "titulo": "üè¢ 5. Qual o perfil predominante da atividade dos colaboradores?",
        "objetivo": "Identificar o tipo de ambiente de trabalho",
        "opcoes": [
            {"valor": "administrativo", "texto": "üíª Administrativo (escrit√≥rio)"},
            {"valor": "producao", "texto": "üè≠ Produ√ß√£o (ch√£o de f√°brica)"},
            {"valor": "externo", "texto": "üöó Externo (rua)"},
            {"valor": "misto", "texto": "üîÑ Misto"}
        ]
    },
    {
        "id": 6,
        "titulo": "ü¶¥ 6. H√° registro de queixas frequentes de dores f√≠sicas relacionadas ao trabalho?",
        "objetivo": "Identificar problemas ergon√¥micos existentes",
        "opcoes": [
            {"valor": "frequentes", "texto": "üö® Sim, queixas frequentes"},
            {"valor": "ocasionais", "texto": "‚ö†Ô∏è Sim, queixas ocasionais"},
            {"valor": "raras", "texto": "üìâ Sim, queixas raras"},
            {"valor": "nao", "texto": "‚úÖ N√£o"}
        ]
    },
    {
        "id": 7,
        "titulo": "üîç 7. A empresa j√° realizou avalia√ß√£o ergon√¥mica do ambiente de trabalho nos √∫ltimos 12 meses?",
        "objetivo": "Verificar se h√° diagn√≥stico ergon√¥mico recente",
        "opcoes": [
            {"valor": "completa", "texto": "‚úÖ Sim, avalia√ß√£o completa"},
            {"valor": "parcial", "texto": "üìä Sim, avalia√ß√£o parcial"},
            {"valor": "nao_recente", "texto": "‚è∞ N√£o recentemente (mais de 12 meses)"},
            {"valor": "nunca", "texto": "‚ùå Nunca foi realizada"}
        ]
    },
    {
        "id": 8,
        "titulo": "üèÉ 8. Quais a√ß√µes preventivas em ergonomia j√° foram implementadas?",
        "objetivo": "Mapear a√ß√µes ergon√¥micas existentes",
        "opcoes": [
            {"valor": "nenhuma", "texto": "‚ùå Nenhuma a√ß√£o"},
            {"valor": "treinamentos", "texto": "üìö Treinamentos pontuais"},
            {"valor": "ajustes", "texto": "üîß Ajustes de mobili√°rio"},
            {"valor": "programa", "texto": "üìã Programa estruturado"}
        ]
    },
    {
        "id": 9,
        "titulo": "‚è∞ 9. Qual a jornada de trabalho predominante na empresa?",
        "objetivo": "Avaliar impacto da jornada no bem-estar",
        "opcoes": [
            {"valor": "padrao", "texto": "‚è∞ Padr√£o (8h di√°rias)"},
            {"valor": "estendida", "texto": "‚è≥ Estendida (9h+ di√°rias)"},
            {"valor": "turnos", "texto": "üîÑ Turnos/Escala"},
            {"valor": "flexivel", "texto": "üè† Flex√≠vel/Home office"}
        ]
    },
    {
        "id": 10,
        "titulo": "üìà 10. Como a empresa avalia a necessidade de investimento em sa√∫de ocupacional?",
        "objetivo": "Medir engajamento e prioriza√ß√£o do tema",
        "opcoes": [
            {"valor": "prioritaria", "texto": "üöÄ Priorit√°ria e urgente"},
            {"valor": "importante", "texto": "üìä Importante, mas n√£o urgente"},
            {"valor": "secundaria", "texto": "‚öñÔ∏è Secund√°ria"},
            {"valor": "desnecessaria", "texto": "‚ùì N√£o v√™ necessidade"}
        ]
    }
]

@app.route('/validar_cnpj', methods=['POST'])
def validar_cnpj_route():
    """Endpoint para validar CNPJ e buscar dados da empresa"""
    data = request.get_json()
    cnpj = data.get('cnpj', '').strip()
    
    if not cnpj:
        return jsonify({'valid': False, 'message': 'CNPJ √© obrigat√≥rio'})
    
    # Validar formato do CNPJ
    if not validar_cnpj(cnpj):
        return jsonify({'valid': False, 'message': 'CNPJ inv√°lido'})
    
    # Consultar dados na ReceitaWS
    dados_empresa = consultar_cnpj_receita_ws(cnpj)
    
    if not dados_empresa:
        return jsonify({'valid': False, 'message': 'CNPJ n√£o encontrado ou erro na consulta'})
    
    if dados_empresa.get('situacao') != 'ATIVA':
        return jsonify({
            'valid': False, 
            'message': f'Empresa com situa√ß√£o: {dados_empresa.get("situacao", "INATIVA")}. Apenas empresas ativas podem realizar o diagn√≥stico.'
        })
    
    return jsonify({
        'valid': True,
        'dados_empresa': dados_empresa,
        'message': 'CNPJ v√°lido e empresa ativa'
    })

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/questionario')
def questionario():
    return render_template('questionario.html', perguntas=PERGUNTAS)

@app.route('/processar_questionario', methods=['POST'])
def processar_questionario():
    try:
        dados = request.get_json()
        
        # Validar dados obrigat√≥rios
        if 'dados_empresa' not in dados or 'respostas' not in dados:
            return jsonify({
                'status': 'error',
                'message': 'Dados incompletos'
            }), 400
        
        dados_empresa = dados['dados_empresa']
        respostas = dados['respostas']
        
        # Validar CNPJ novamente
        if not validar_cnpj(dados_empresa.get('cnpj', '')):
            return jsonify({
                'status': 'error',
                'message': 'CNPJ inv√°lido'
            }), 400
        
        # Gerar an√°lise
        analise = gerar_analise(respostas)
        
        # Salvar no banco de dados (Supabase)
        empresa_id, diagnostico_id = salvar_empresa_diagnostico(dados_empresa, respostas, analise)
        
        # Salvar dados temporariamente para gera√ß√£o do PDF
        dados_completos = {
            'dados_empresa': dados_empresa,
            'respostas': respostas,
            'analise': analise,
            'empresa_id': empresa_id,
            'diagnostico_id': diagnostico_id
        }
        
        with open('temp_diagnostico.json', 'w', encoding='utf-8') as f:
            json.dump(dados_completos, f, ensure_ascii=False, indent=2, default=str)
        
        return jsonify({
            'status': 'success',
            'analise': analise,
            'empresa_id': empresa_id,
            'diagnostico_id': diagnostico_id,
            'redirect': '/resultado'
        })
    except Exception as e:
        print(f"Erro no processamento: {e}")
        return jsonify({
            'status': 'error',
            'message': f'Erro interno: {str(e)}'
        }), 500

@app.route('/resultado')
def resultado():
    try:
        with open('temp_diagnostico.json', 'r', encoding='utf-8') as f:
            dados = json.load(f)
        
        return render_template('resultado.html', dados=dados)
    except FileNotFoundError:
        flash('Dados do diagn√≥stico n√£o encontrados. Por favor, refa√ßa o question√°rio.', 'error')
        return redirect('/')

@app.route('/admin/login', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        if not supabase:
            flash('Sistema de administra√ß√£o indispon√≠vel', 'error')
            return render_template('admin/login.html')
        
        try:
            # Buscar usu√°rio no banco
            user_result = supabase.table('admin_users').select('*').eq('username', username).eq('is_active', True).execute()
            
            if user_result.data:
                user = user_result.data[0]
                
                # Verificar senha (em produ√ß√£o, use hash seguro)
                password_hash = hashlib.sha256(password.encode()).hexdigest()
                
                # Para simplificar, vamos aceitar a senha 'admin123' para o usu√°rio admin
                if username == 'admin' and password == 'admin123':
                    session['admin_user'] = {
                        'id': user['id'],
                        'username': user['username'],
                        'email': user['email'],
                        'role': user['role']
                    }
                    
                    # Atualizar √∫ltimo login
                    supabase.table('admin_users').update({
                        'last_login': datetime.now().isoformat()
                    }).eq('id', user['id']).execute()
                    
                    flash('Login realizado com sucesso!', 'success')
                    return redirect(url_for('admin_dashboard'))
                else:
                    flash('Credenciais inv√°lidas', 'error')
            else:
                flash('Usu√°rio n√£o encontrado', 'error')
                
        except Exception as e:
            flash('Erro no sistema de autentica√ß√£o', 'error')
            print(f"Erro no login: {e}")
    
    return render_template('admin/login.html')

@app.route('/admin/logout')
def admin_logout():
    session.pop('admin_user', None)
    flash('Logout realizado com sucesso', 'success')
    return redirect(url_for('admin_login'))

@app.route('/admin')
@app.route('/admin/dashboard')
@requires_admin
def admin_dashboard():
    if not supabase:
        flash('Sistema de administra√ß√£o indispon√≠vel', 'error')
        return redirect('/')
    
    try:
        # Buscar estat√≠sticas
        stats_result = supabase.table('vw_estatisticas_admin').select('*').limit(1).execute()
        stats = stats_result.data[0] if stats_result.data else {}
        
        # Buscar diagn√≥sticos recentes
        recent_result = supabase.table('vw_diagnosticos_completos').select('*').limit(10).execute()
        recent_diagnosticos = recent_result.data
        
        return render_template('admin/dashboard.html', 
                               stats=stats, 
                               recent_diagnosticos=recent_diagnosticos)
    except Exception as e:
        flash('Erro ao carregar dados do dashboard', 'error')
        print(f"Erro no dashboard: {e}")
        return render_template('admin/dashboard.html', stats={}, recent_diagnosticos=[])

@app.route('/admin/empresas')
@requires_admin
def admin_empresas():
    if not supabase:
        flash('Sistema de administra√ß√£o indispon√≠vel', 'error')
        return redirect('/')
    
    try:
        # Par√¢metros de filtro
        search = request.args.get('search', '')
        page = int(request.args.get('page', 1))
        per_page = 20
        
        # Query base
        query = supabase.table('vw_diagnosticos_completos').select('*')
        
        # Aplicar filtro de busca
        if search:
            query = query.or_(f'razao_social.ilike.%{search}%,cnpj.ilike.%{search}%,rh_responsavel.ilike.%{search}%')
        
        # Aplicar pagina√ß√£o
        start = (page - 1) * per_page
        end = start + per_page - 1
        
        result = query.range(start, end).order('data_diagnostico', desc=True).execute()
        empresas = result.data
        
        return render_template('admin/empresas.html', 
                               empresas=empresas, 
                               search=search,
                               page=page)
    except Exception as e:
        flash('Erro ao carregar lista de empresas', 'error')
        print(f"Erro ao buscar empresas: {e}")
        return render_template('admin/empresas.html', empresas=[], search='', page=1)

@app.route('/admin/empresa/<empresa_id>')
@requires_admin
def admin_empresa_detalhes(empresa_id):
    if not supabase:
        flash('Sistema de administra√ß√£o indispon√≠vel', 'error')
        return redirect('/')
    
    try:
        # Buscar dados da empresa
        empresa_result = supabase.table('empresas').select('*').eq('id', empresa_id).execute()
        if not empresa_result.data:
            flash('Empresa n√£o encontrada', 'error')
            return redirect(url_for('admin_empresas'))
        
        empresa = empresa_result.data[0]
        
        # Buscar todos os diagn√≥sticos da empresa
        diagnosticos_result = supabase.table('diagnosticos').select('*').eq('empresa_id', empresa_id).order('created_at', desc=True).execute()
        diagnosticos = diagnosticos_result.data
        
        return render_template('admin/empresa_detalhes.html', 
                               empresa=empresa, 
                               diagnosticos=diagnosticos)
    except Exception as e:
        flash('Erro ao carregar detalhes da empresa', 'error')
        print(f"Erro ao buscar empresa: {e}")
        return redirect(url_for('admin_empresas'))

@app.route('/gerar_pdf')
def gerar_pdf():
    try:
        # Verificar se o arquivo existe
        if not os.path.exists('temp_diagnostico.json'):
            return jsonify({'error': 'Dados do diagn√≥stico n√£o encontrados. Refa√ßa o question√°rio.'}), 404
        
        with open('temp_diagnostico.json', 'r', encoding='utf-8') as f:
            dados = json.load(f)
        
        print(f"Dados carregados: {dados}")  # Debug
        
        pdf_buffer = criar_pdf_relatorio(dados)
        print("PDF criado com sucesso")  # Debug
        
        return send_file(
            io.BytesIO(pdf_buffer),
            mimetype='application/pdf',
            as_attachment=True,
            download_name=f'diagnostico_programa_equilibrio_{datetime.now().strftime("%Y%m%d")}.pdf'
        )
    except Exception as e:
        print(f"Erro na gera√ß√£o de PDF: {str(e)}")  # Debug
        return jsonify({'error': f'Erro ao gerar PDF: {str(e)}'}), 500

def gerar_analise(respostas):
    """Gera an√°lise baseada nas respostas do question√°rio"""
    
    # An√°lise de sa√∫de mental
    questoes_criticas = 0
    acoes_recomendadas = []
    areas_foco = []
    
    # An√°lise quest√£o por quest√£o
    if respostas.get('1') == 'alta_carga':
        questoes_criticas += 1
        acoes_recomendadas.append("Programa: Comunica√ß√£o N√£o Violenta e Seguran√ßa Psicol√≥gica")
        areas_foco.append("Sa√∫de Mental")
    
    if respostas.get('2') in ['frequencia_alta', 'frequencia_moderada']:
        questoes_criticas += 2
        acoes_recomendadas.append("Programa: Preven√ß√£o e Manejo do Estresse Ocupacional")
        areas_foco.append("Sa√∫de Mental")
    
    if respostas.get('3') in ['critico', 'moderado']:
        questoes_criticas += 1
        areas_foco.append("Sa√∫de Mental")
    
    if respostas.get('6') in ['frequentes', 'ocasionais']:
        questoes_criticas += 1
        acoes_recomendadas.append("Programa: Avalia√ß√£o Ergon√¥mica Completa")
        areas_foco.append("Ergonomia")
    
    if respostas.get('7') in ['nunca', 'nao_recente']:
        questoes_criticas += 1
        acoes_recomendadas.append("Programa: Implementa√ß√£o de Ergonomia no Trabalho")
        areas_foco.append("Ergonomia")
    
    # Se n√£o h√° a√ß√µes espec√≠ficas, adicionar a√ß√µes preventivas
    if not acoes_recomendadas:
        acoes_recomendadas.append("Programa: Promo√ß√£o de Bem-estar no Trabalho")
    
    # Determinar n√≠vel de risco
    if questoes_criticas >= 4:
        nivel_risco = "Alto"
    elif questoes_criticas >= 2:
        nivel_risco = "Moderado" 
    else:
        nivel_risco = "Baixo"
    
    return {
        'questoes_criticas': questoes_criticas,
        'nivel_risco': nivel_risco,
        'areas_foco': list(set(areas_foco)),
        'acoes_recomendadas': list(set(acoes_recomendadas)),
        'data_diagnostico': datetime.now().strftime("%d/%m/%Y")
    }

def criar_pdf_relatorio(dados):
    """Cria um relat√≥rio PDF profissional com a logo da Belz Conecta Sa√∫de"""
    buffer = io.BytesIO()
    
    # Extrair dados
    dados_empresa = dados.get('dados_empresa', {})
    analise = dados.get('analise', {})
    
    # Configura√ß√£o da p√°gina
    width, height = A4
    p = canvas.Canvas(buffer, pagesize=A4)
    
    # Fun√ß√£o helper para centralizar texto
    def draw_centered_text(canvas, x, y, text, font_size=12):
        canvas.setFont("Helvetica", font_size)
        text_width = canvas.stringWidth(str(text))
        canvas.drawString(x - text_width/2, y, str(text))
    
    def draw_header_with_logo(canvas, y_start):
        """Desenha cabe√ßalho profissional com logo"""
        # Background do header com bordas arredondadas superiores usando roundRect
        canvas.setFillColor(HexColor("#130E54"))
        canvas.roundRect(0, y_start, width, 100, radius=15, fill=True, stroke=False)
        
        # Tentar carregar logo
        logo_path = os.path.join('static', 'images', 'logo-conecta.png')
        print(f"Tentando carregar logo do caminho: {logo_path}")
        print(f"Logo existe? {os.path.exists(logo_path)}")
        
        if os.path.exists(logo_path):
            try:
                # Tentativa 1: Usar diretamente o PNG com mask='auto' para transpar√™ncia
                print("Tentando carregar logo diretamente com transpar√™ncia...")
                canvas.drawImage(logo_path, 20, y_start + 25, width=120, height=45, mask='auto', preserveAspectRatio=True)
                print("Logo carregada diretamente com transpar√™ncia!")
                
            except Exception as e1:
                print(f"Erro ao carregar com transpar√™ncia: {e1}")
                try:
                    # Tentativa 2: Usar PIL mas manter transpar√™ncia
                    from PIL import Image
                    print("PIL importado, tentando manter transpar√™ncia...")
                    
                    img = Image.open(logo_path)
                    print(f"Logo aberta. Modo: {img.mode}, Tamanho: {img.size}")
                    
                    # Para PNG com transpar√™ncia, salvar como PNG tempor√°rio ao inv√©s de JPEG
                    if img.mode == 'RGBA':
                        # Manter como RGBA para preservar transpar√™ncia
                        temp_path = 'temp_logo.png'
                        img.save(temp_path, 'PNG')
                        print("Logo salva como PNG tempor√°rio (mantendo transpar√™ncia)")
                    else:
                        # Se n√£o tem transpar√™ncia, converter para RGB
                        img = img.convert('RGB')
                        temp_path = 'temp_logo.jpg'
                        img.save(temp_path, 'JPEG', quality=95)
                        print("Logo salva como JPEG tempor√°rio")
                    
                    # Calcular dimens√µes mantendo aspect ratio
                    logo_width = 75
                    logo_height = int(100 * img.size[1] / img.size[0])
                    
                    if logo_height > 50:
                        logo_height = 50
                        logo_width = int(50 * img.size[0] / img.size[1])
                    
                    print(f"Dimens√µes da logo: {logo_width}x{logo_height}")
                    
                    # Desenhar com mask='auto' se for PNG, sem mask se for JPEG
                    if temp_path.endswith('.png'):
                        canvas.drawImage(temp_path, 20, y_start + 25, width=logo_width, height=logo_height, mask='auto')
                    else:
                        canvas.drawImage(temp_path, 20, y_start + 25, width=logo_width, height=logo_height)
                    
                    print("Logo desenhada com PIL")
                    os.remove(temp_path)
                    
                except Exception as e2:
                    print(f"Erro com PIL: {e2}")
                    # Placeholder sem fundo preto
                    canvas.setFillColor(HexColor("#FFFFFF"))
                    canvas.circle(50, y_start + 50, 20, fill=True)
                    canvas.setFillColor(HexColor("#130E54"))
                    canvas.setFont("Helvetica-Bold", 10)
                    canvas.drawString(42, y_start + 46, "BELZ")
        else:
            # Logo n√£o existe, desenhar placeholder
            print("Logo n√£o encontrada, usando placeholder")
            canvas.setFillColor(HexColor("#FFFFFF"))
            canvas.circle(50, y_start + 50, 20, fill=True)
            canvas.setFillColor(HexColor("#130E54"))
            canvas.setFont("Helvetica-Bold", 10)
            canvas.drawString(42, y_start + 46, "BELZ")
        
        # T√≠tulo principal - ajustado para dar mais espa√ßo √† logo
        canvas.setFillColor(HexColor("#FFFFFF"))
        canvas.setFont("Helvetica-Bold", 24)
        canvas.drawString(150, y_start + 55, "BELZ CONECTA SA√öDE")
        
        # Subt√≠tulo - alinhado com o t√≠tulo
        canvas.setFont("Helvetica", 14)
        canvas.drawString(150, y_start + 35, "Programa Equil√≠brio - Diagn√≥stico Corporativo")
        
        # Data do relat√≥rio
        canvas.setFont("Helvetica", 10)
        canvas.drawRightString(width - 30, y_start + 15, f"Relat√≥rio gerado em: {analise.get('data_diagnostico', datetime.now().strftime('%d/%m/%Y'))}")
        
        return y_start - 20
    
    def draw_section_header(canvas, x, y, title, color="#130E54"):
        """Desenha cabe√ßalho de se√ß√£o estilizado com bordas arredondadas"""
        canvas.setFillColor(HexColor(color))
        
        # Usar roundRect para bordas arredondadas
        rect_x = x - 10
        rect_y = y - 5
        rect_width = width - 80
        rect_height = 30
        radius = 10  # raio das bordas arredondadas
        
        canvas.roundRect(rect_x, rect_y, rect_width, rect_height, radius=radius, fill=True, stroke=False)
        
        canvas.setFillColor(HexColor("#FFFFFF"))
        canvas.setFont("Helvetica-Bold", 14)
        canvas.drawString(x, y+10, title)
        
        return y - 40
    
    def draw_info_box(canvas, x, y, title, content, box_color="#f6f6f6", text_color="#000000"):
        """Desenha caixa de informa√ß√£o estilizada com bordas arredondadas"""
        box_height = len(content) * 15 + 40
        radius = 8  # raio das bordas arredondadas
        
        # Fundo com bordas arredondadas
        canvas.setFillColor(HexColor(box_color))
        canvas.roundRect(x, y - box_height, 500, box_height, radius=radius, fill=True, stroke=False)
        
        # Borda com bordas arredondadas
        canvas.setStrokeColor(HexColor("#130E54"))
        canvas.setLineWidth(1)
        canvas.roundRect(x, y - box_height, 500, box_height, radius=radius, fill=False, stroke=True)
        
        # Title
        canvas.setFillColor(HexColor("#130E54"))
        canvas.setFont("Helvetica-Bold", 12)
        canvas.drawString(x + 15, y - 20, title)
        
        # Content
        canvas.setFillColor(HexColor(text_color))
        canvas.setFont("Helvetica", 10)
        y_content = y - 40
        for line in content:
            canvas.drawString(x + 15, y_content, line)
            y_content -= 15
        
        return y - box_height - 20
    
    def draw_action_card(canvas, x, y, acao, categoria, cor):
        """Desenha card de a√ß√£o profissional"""
        card_height = 80
        
        # Card background with shadow effect
        canvas.setFillColor(HexColor("#e0e0e0"))
        canvas.roundRect(x+3, y - card_height-3, 500, card_height, 10, fill=True)
        canvas.setFillColor(HexColor(cor))
        canvas.roundRect(x, y - card_height, 500, card_height, 10, fill=True)
        
        # Content
        canvas.setFillColor(HexColor("#FFFFFF"))
        canvas.setFont("Helvetica-Bold", 12)
        canvas.drawString(x + 20, y - 25, acao)
        
        canvas.setFont("Helvetica", 10)
        canvas.drawString(x + 20, y - 45, f"Categoria: {categoria}")
        
        # Detalhes baseados na categoria
        if "Mental" in categoria:
            duracao = "Dura√ß√£o: 5 horas | P√∫blico: Todos os colaboradores + Lideran√ßas"
        else:
            duracao = "Dura√ß√£o: 16 horas | P√∫blico: RH + Lideran√ßas + SESMT"
        
        canvas.drawString(x + 20, y - 60, duracao)
        
        return y - card_height - 15
    
    # Come√ßar o documento
    current_y = height - 20
    
    # Header com logo
    current_y = draw_header_with_logo(p, current_y - 80)
    current_y -= 40
    
    # Dados da Empresa
    current_y = draw_section_header(p, 50, current_y, "üìã INFORMA√á√ïES DA EMPRESA")
    
    empresa_info = [
        f"Empresa: {dados_empresa.get('razao_social', 'N/A')}",
        f"Nome Fantasia: {dados_empresa.get('nome_fantasia', 'N/A')}",
        f"CNPJ: {dados_empresa.get('cnpj', 'N/A')}",
        f"RH Respons√°vel: {dados_empresa.get('rh_responsavel', 'N/A')}",
        f"Cargo: {dados_empresa.get('cargo', 'N/A')}",
        f"E-mail: {dados_empresa.get('email', 'N/A')}",
        f"WhatsApp: {dados_empresa.get('whatsapp', 'N/A')}",
        f"N√∫mero de Colaboradores: {dados_empresa.get('num_colaboradores', 'N/A')}"
    ]
    
    current_y = draw_info_box(p, 50, current_y, "Dados Cadastrais", empresa_info)
    current_y -= 20
    
    # Resumo do Diagn√≥stico
    current_y = draw_section_header(p, 50, current_y, "üéØ RESUMO DO DIAGN√ìSTICO")
    
    resumo_info = [
        f"N√≠vel de Risco: {analise.get('nivel_risco', 'N/A')}",
        f"Quest√µes Cr√≠ticas Identificadas: {analise.get('questoes_criticas', 0)}",
        f"√Åreas de Foco: {', '.join(analise.get('areas_foco', [])) if analise.get('areas_foco') else 'Preven√ß√£o Geral'}",
        f"Total de A√ß√µes Recomendadas: {len(analise.get('acoes_recomendadas', []))}"
    ]
    
    # Cor baseada no n√≠vel de risco
    nivel_risco = analise.get('nivel_risco', 'Baixo')
    if "Alto" in nivel_risco:
        cor_resumo = "#dc3545"
    elif "Moderado" in nivel_risco:
        cor_resumo = "#fd7e14"
    else:
        cor_resumo = "#28a745"
    
    current_y = draw_info_box(p, 50, current_y, "Status Atual", resumo_info, cor_resumo, "#FFFFFF")
    
    # Nova p√°gina para a√ß√µes
    p.showPage()
    current_y = height - 50
    
    # A√ß√µes Recomendadas
    current_y = draw_section_header(p, 50, current_y, "üöÄ A√á√ïES RECOMENDADAS")
    current_y -= 20
    
    for i, acao in enumerate(analise.get('acoes_recomendadas', [])):
        if "Comunica√ß√£o" in acao or "Mental" in acao:
            categoria = "üß† Sa√∫de Mental"
            cor = "#dc3545"
        else:
            categoria = "üîß Ergonomia"
            cor = "#fd7e14"
        
        current_y = draw_action_card(p, 50, current_y, acao, categoria, cor)
        
        # Nova p√°gina se necess√°rio
        if current_y < 150:
            p.showPage()
            current_y = height - 50
    
    # Plano de A√ß√£o Timeline
    if current_y < 300:
        p.showPage()
        current_y = height - 50
    
    current_y = draw_section_header(p, 50, current_y, "üìÖ CRONOGRAMA DE IMPLEMENTA√á√ÉO")
    current_y -= 20
    
    # Timeline visual
    acoes_recomendadas = analise.get('acoes_recomendadas', [])
    timeline_items = [
        ("üö® IMEDIATO (0-30 dias)", [acao for acao in acoes_recomendadas if "Comunica√ß√£o" in acao or "Mental" in acao], "#dc3545"),
        ("‚ö†Ô∏è M√âDIO PRAZO (30-60 dias)", [acao for acao in acoes_recomendadas if "Ergon√¥mica" in acao or "Ergonomia" in acao], "#fd7e14"),
        ("üìä LONGO PRAZO (60+ dias)", ["Implementar pesquisas de clima trimestrais", "Criar programa de sa√∫de ocupacional permanente"], "#28a745")
    ]
    
    for fase, acoes, cor in timeline_items:
        if acoes:  # S√≥ mostrar se houver a√ß√µes
            current_y = draw_info_box(p, 50, current_y, fase, [f"‚Ä¢ {acao}" for acao in acoes], cor, "#FFFFFF")
            current_y -= 10
    
    # Footer profissional
    p.setFillColor(HexColor("#f6f6f6"))
    p.rect(0, 0, width, 50, fill=True)
    
    p.setFillColor(HexColor("#130E54"))
    p.setFont("Helvetica", 10)
    draw_centered_text(p, width/2, 25, "Belz Conecta Sa√∫de - Programa Equil√≠brio | www.belzconectasaude.com.br")
    draw_centered_text(p, width/2, 10, "Este relat√≥rio √© confidencial e destinado exclusivamente √† empresa solicitante")
    
    p.save()
    buffer.seek(0)
    return buffer.getvalue()

if __name__ == '__main__':
    # Criar diret√≥rios necess√°rios
    os.makedirs('templates', exist_ok=True)
    os.makedirs('static/css', exist_ok=True)
    os.makedirs('static/js', exist_ok=True)
    os.makedirs('static/images', exist_ok=True)
    
    # Para desenvolvimento local
    app.run(debug=True, host='0.0.0.0', port=5000)

# Para Vercel - exportar a aplica√ß√£o
if __name__ != '__main__':
    # Configura√ß√µes para produ√ß√£o na Vercel
    app.config['DEBUG'] = False
